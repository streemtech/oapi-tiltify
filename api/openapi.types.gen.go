// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

// CampaignsId defines model for CampaignsId.
type CampaignsId struct {
	AmountRaised           *float32    `json:"amountRaised,omitempty"`
	Avatar                 *Image      `json:"avatar,omitempty"`
	CauseId                *int        `json:"causeId,omitempty"`
	Description            *string     `json:"description,omitempty"`
	EndsAt                 *int        `json:"endsAt,omitempty"`
	FundraiserGoalAmount   *float32    `json:"fundraiserGoalAmount,omitempty"`
	FundraisingEventId     *int        `json:"fundraisingEventId,omitempty"`
	Id                     *int        `json:"id,omitempty"`
	Livestream             *Livestream `json:"livestream,omitempty"`
	Name                   *string     `json:"name,omitempty"`
	OriginalGoalAmount     *float32    `json:"originalGoalAmount,omitempty"`
	Slug                   *string     `json:"slug,omitempty"`
	StartsAt               *int        `json:"startsAt,omitempty"`
	Status                 *string     `json:"status,omitempty"`
	Supportable            *bool       `json:"supportable,omitempty"`
	SupportingAmountRaised *float32    `json:"supportingAmountRaised,omitempty"`
	Team                   *struct {
		Avatar   *Image  `json:"avatar,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Slug     *string `json:"slug,omitempty"`
		Url      *string `json:"url,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"team,omitempty"`
	TotalAmountRaised *float32 `json:"totalAmountRaised,omitempty"`
	Url               *string  `json:"url,omitempty"`
	User              *struct {
		Avatar   *Image  `json:"avatar,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Slug     *string `json:"slug,omitempty"`
		Url      *string `json:"url,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"user,omitempty"`
}

// CampaignsIdChallenges defines model for CampaignsIdChallenges.
type CampaignsIdChallenges struct {
	ActivatesOn       *int     `json:"activatesOn,omitempty"`
	Active            *bool    `json:"active,omitempty"`
	Amount            *float32 `json:"amount,omitempty"`
	CampaignId        *int     `json:"campaignId,omitempty"`
	CreatedAt         *int     `json:"createdAt,omitempty"`
	EndsAt            *int     `json:"endsAt,omitempty"`
	Id                *int     `json:"id,omitempty"`
	Name              *string  `json:"name,omitempty"`
	TotalAmountRaised *float32 `json:"totalAmountRaised,omitempty"`
	UpdatedAt         *int     `json:"updatedAt,omitempty"`
}

// CampaignsIdDonations defines model for CampaignsIdDonations.
type CampaignsIdDonations struct {
	Amount      *float32 `json:"amount,omitempty"`
	Comment     *string  `json:"comment,omitempty"`
	CompletedAt *int     `json:"completedAt,omitempty"`
	Id          *int     `json:"id,omitempty"`
	Name        *string  `json:"name,omitempty"`
	RewardId    *int     `json:"rewardId,omitempty"`
}

// CampaignsIdPolls defines model for CampaignsIdPolls.
type CampaignsIdPolls struct {
	Active     *bool   `json:"active,omitempty"`
	CampaignId *int    `json:"campaignId,omitempty"`
	CreatedAt  *int    `json:"createdAt,omitempty"`
	Id         *int    `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	Options    *[]struct {
		CreatedAt         *int     `json:"createdAt,omitempty"`
		Id                *int     `json:"id,omitempty"`
		Name              *string  `json:"name,omitempty"`
		PollId            *int     `json:"pollId,omitempty"`
		TotalAmountRaised *float32 `json:"totalAmountRaised,omitempty"`
		UpdatedAt         *int     `json:"updatedAt,omitempty"`
	} `json:"options,omitempty"`
	UpdatedAt *int `json:"updatedAt,omitempty"`
}

// CampaignsIdRewards defines model for CampaignsIdRewards.
type CampaignsIdRewards []struct {
	Active                  *bool                   `json:"active,omitempty"`
	Amount                  *float32                `json:"amount,omitempty"`
	CreatedAt               *int                    `json:"createdAt,omitempty"`
	Currency                *string                 `json:"currency,omitempty"`
	Description             *string                 `json:"description,omitempty"`
	FairMarketValue         *int                    `json:"fairMarketValue,omitempty"`
	Id                      *int                    `json:"id,omitempty"`
	Image                   *Image                  `json:"image,omitempty"`
	Kind                    *string                 `json:"kind,omitempty"`
	Name                    *string                 `json:"name,omitempty"`
	Quantity                *map[string]interface{} `json:"quantity,omitempty"`
	Remaining               *map[string]interface{} `json:"remaining,omitempty"`
	ShippingAddressRequired *bool                   `json:"shippingAddressRequired,omitempty"`
	ShippingNote            *map[string]interface{} `json:"shippingNote,omitempty"`
	StartsAt                *int                    `json:"startsAt,omitempty"`
	UpdatedAt               *int                    `json:"updatedAt,omitempty"`
}

// CampaignsIdSchedule defines model for CampaignsIdSchedule.
type CampaignsIdSchedule []struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	StartsAt    *int    `json:"startsAt,omitempty"`
}

// CampaignsIdSupportingCampaigns defines model for CampaignsIdSupportingCampaigns.
type CampaignsIdSupportingCampaigns []struct {
	AmountRaised       *float32                `json:"amountRaised,omitempty"`
	CauseId            *int                    `json:"causeId,omitempty"`
	Description        *string                 `json:"description,omitempty"`
	EndsOn             *string                 `json:"endsOn,omitempty"`
	FundraisingEventId *int                    `json:"fundraisingEventId,omitempty"`
	Goal               *int                    `json:"goal,omitempty"`
	Id                 *int                    `json:"id,omitempty"`
	Name               *string                 `json:"name,omitempty"`
	OriginalGoal       *int                    `json:"originalGoal,omitempty"`
	Slug               *string                 `json:"slug,omitempty"`
	StartsOn           *string                 `json:"startsOn,omitempty"`
	TeamId             *map[string]interface{} `json:"teamId,omitempty"`
	Thumbnail          *Image                  `json:"thumbnail,omitempty"`
	TotalAmountRaised  *float32                `json:"totalAmountRaised,omitempty"`
	Url                *string                 `json:"url,omitempty"`
	UserId             *int                    `json:"userId,omitempty"`
}

// CausesId defines model for CausesId.
type CausesId struct {
	About   *string `json:"about,omitempty"`
	Address *struct {
		AddressLine1 *string `json:"addressLine1,omitempty"`
		AddressLine2 *string `json:"addressLine2,omitempty"`
		City         *string `json:"city,omitempty"`
		Country      *string `json:"country,omitempty"`
		PostalCode   *string `json:"postalCode,omitempty"`
		Region       *string `json:"region,omitempty"`
	} `json:"address,omitempty"`
	Avatar             *Image  `json:"avatar,omitempty"`
	Banner             *Image  `json:"banner,omitempty"`
	ContactEmail       *string `json:"contactEmail,omitempty"`
	Currency           *string `json:"currency,omitempty"`
	Id                 *int    `json:"id,omitempty"`
	Image              *Image  `json:"image,omitempty"`
	LegalName          *string `json:"legalName,omitempty"`
	Logo               *Image  `json:"logo,omitempty"`
	MailchimpConnected *bool   `json:"mailchimpConnected,omitempty"`
	Name               *string `json:"name,omitempty"`
	PaypalCurrencyCode *string `json:"paypalCurrencyCode,omitempty"`
	PaypalEmail        *string `json:"paypalEmail,omitempty"`
	Settings           *struct {
		Colors *struct {
			Background *string `json:"background,omitempty"`
			Highlight  *string `json:"highlight,omitempty"`
		} `json:"colors,omitempty"`
		FindOutMoreLink *string `json:"findOutMoreLink,omitempty"`
		FooterCopyright *string `json:"footerCopyright,omitempty"`
		HeaderIntro     *string `json:"headerIntro,omitempty"`
		HeaderTitle     *string `json:"headerTitle,omitempty"`
	} `json:"settings,omitempty"`
	Slug   *string `json:"slug,omitempty"`
	Social *struct {
		Facebook  *string `json:"facebook,omitempty"`
		Instagram *string `json:"instagram,omitempty"`
		Twitter   *string `json:"twitter,omitempty"`
		Youtube   *string `json:"youtube,omitempty"`
	} `json:"social,omitempty"`
	Status          *string `json:"status,omitempty"`
	StripeConnected *bool   `json:"stripeConnected,omitempty"`
	Video           *string `json:"video,omitempty"`
}

// CausesIdCampaigns defines model for CausesIdCampaigns.
type CausesIdCampaigns []struct {
	AmountRaised       *float32                `json:"amountRaised,omitempty"`
	CauseId            *int                    `json:"causeId,omitempty"`
	Currency           *string                 `json:"currency,omitempty"`
	Description        *string                 `json:"description,omitempty"`
	EndsOn             *string                 `json:"endsOn,omitempty"`
	FundraisingEventId *int                    `json:"fundraisingEventId,omitempty"`
	Goal               *int                    `json:"goal,omitempty"`
	Name               *string                 `json:"name,omitempty"`
	OriginalGoal       *int                    `json:"originalGoal,omitempty"`
	Slug               *string                 `json:"slug,omitempty"`
	StartsOn           *string                 `json:"startsOn,omitempty"`
	TeamId             *map[string]interface{} `json:"teamId,omitempty"`
	Thumbnail          *Image                  `json:"thumbnail,omitempty"`
	TotalAmountRaised  *float32                `json:"totalAmountRaised,omitempty"`
	Url                *string                 `json:"url,omitempty"`
	UserId             *int                    `json:"userId,omitempty"`
}

// CausesIdFundraisingEvents defines model for CausesIdFundraisingEvents.
type CausesIdFundraisingEvents []struct {
	AmountRaised *float32 `json:"amountRaised,omitempty"`
	Avatar       *Image   `json:"avatar,omitempty"`
	Banner       *Image   `json:"banner,omitempty"`
	BannerIntro  *string  `json:"bannerIntro,omitempty"`
	BannerTitle  *string  `json:"bannerTitle,omitempty"`
	CauseId      *int     `json:"causeId,omitempty"`
	Currency     *string  `json:"currency,omitempty"`
	Description  *string  `json:"description,omitempty"`
	EndsOn       *string  `json:"endsOn,omitempty"`
	Goal         *int     `json:"goal,omitempty"`
	Id           *int     `json:"id,omitempty"`
	Image        *Image   `json:"image,omitempty"`
	Logo         *Image   `json:"logo,omitempty"`
	Name         *string  `json:"name,omitempty"`
	Slug         *string  `json:"slug,omitempty"`
	StartsOn     *string  `json:"startsOn,omitempty"`
	Url          *string  `json:"url,omitempty"`
	Video        *Image   `json:"video,omitempty"`
}

// CausesIdLeaderboards defines model for CausesIdLeaderboards.
type CausesIdLeaderboards struct {
	Individual *[]struct {
		AmountRaised *float32 `json:"amount_raised,omitempty"`
		Name         *string  `json:"name,omitempty"`
		Url          *string  `json:"url,omitempty"`
		UserId       *int     `json:"userId,omitempty"`
	} `json:"individual,omitempty"`
	Team *[]struct {
		AmountRaised *float32 `json:"amount_raised,omitempty"`
		Name         *string  `json:"name,omitempty"`
		TeamId       *int     `json:"teamId,omitempty"`
		Url          *string  `json:"url,omitempty"`
	} `json:"team,omitempty"`
}

// CausesIdPermissions defines model for CausesIdPermissions.
type CausesIdPermissions struct {
	Activated                               *bool `json:"activated,omitempty"`
	AdminApiEnabled                         *bool `json:"adminApiEnabled,omitempty"`
	AdminBrandingColors                     *bool `json:"adminBrandingColors,omitempty"`
	AdminBrandingDetails                    *bool `json:"adminBrandingDetails,omitempty"`
	AdminBrandingEnabled                    *bool `json:"adminBrandingEnabled,omitempty"`
	AdminBrandingImages                     *bool `json:"adminBrandingImages,omitempty"`
	AdminEnabled                            *bool `json:"adminEnabled,omitempty"`
	AdminFinanceEnabled                     *bool `json:"adminFinanceEnabled,omitempty"`
	AdminGeneralEnabled                     *bool `json:"adminGeneralEnabled,omitempty"`
	AdminIntegrationsEnabled                *bool `json:"adminIntegrationsEnabled,omitempty"`
	AdminVisibilityEnabled                  *bool `json:"adminVisibilityEnabled,omitempty"`
	CauseLeaderboard                        *bool `json:"causeLeaderboard,omitempty"`
	DashboardChart                          *bool `json:"dashboardChart,omitempty"`
	DashboardEnabled                        *bool `json:"dashboardEnabled,omitempty"`
	FundraisingEventsEnabled                *bool `json:"fundraisingEventsEnabled,omitempty"`
	FundraisingEventsGeneralColors          *bool `json:"fundraisingEventsGeneralColors,omitempty"`
	FundraisingEventsGeneralDetails         *bool `json:"fundraisingEventsGeneralDetails,omitempty"`
	FundraisingEventsGeneralEnabled         *bool `json:"fundraisingEventsGeneralEnabled,omitempty"`
	FundraisingEventsGeneralImages          *bool `json:"fundraisingEventsGeneralImages,omitempty"`
	FundraisingEventsIncentives             *bool `json:"fundraisingEventsIncentives,omitempty"`
	FundraisingEventsLeaderboard            *bool `json:"fundraisingEventsLeaderboard,omitempty"`
	FundraisingEventsRegistrationEnabled    *bool `json:"fundraisingEventsRegistrationEnabled,omitempty"`
	FundraisingEventsReporting              *bool `json:"fundraisingEventsReporting,omitempty"`
	FundraisingEventsReportingCampaigns     *bool `json:"fundraisingEventsReportingCampaigns,omitempty"`
	FundraisingEventsReportingDonations     *bool `json:"fundraisingEventsReportingDonations,omitempty"`
	FundraisingEventsReportingFundraisers   *bool `json:"fundraisingEventsReportingFundraisers,omitempty"`
	FundraisingEventsSchedule               *bool `json:"fundraisingEventsSchedule,omitempty"`
	FundraisingEventsVisibilityDetails      *bool `json:"fundraisingEventsVisibilityDetails,omitempty"`
	FundraisingEventsVisibilityEnabled      *bool `json:"fundraisingEventsVisibilityEnabled,omitempty"`
	FundraisingEventsVisibilityLeaderboards *bool `json:"fundraisingEventsVisibilityLeaderboards,omitempty"`
	ReportingCampaigns                      *bool `json:"reportingCampaigns,omitempty"`
	ReportingChart                          *bool `json:"reportingChart,omitempty"`
	ReportingDonations                      *bool `json:"reportingDonations,omitempty"`
	ReportingEnabled                        *bool `json:"reportingEnabled,omitempty"`
	ReportingFundraisers                    *bool `json:"reportingFundraisers,omitempty"`
}

// CausesIdVisibilityOptions defines model for CausesIdVisibilityOptions.
type CausesIdVisibilityOptions struct {
	Donate *struct {
		Visible *bool `json:"visible,omitempty"`
	} `json:"donate,omitempty"`
	IndividualLeaderboard *struct {
		Type    *string `json:"type,omitempty"`
		Visible *bool   `json:"visible,omitempty"`
	} `json:"individual_leaderboard,omitempty"`
	TeamLeaderboard *struct {
		Type    *string `json:"type,omitempty"`
		Visible *bool   `json:"visible,omitempty"`
	} `json:"team_leaderboard,omitempty"`
}

// error response body. Only included in Post and Patch requests.
type Error struct {
	// An object describing the error that occurred
	Error *struct {
		Detial *string `json:"detial,omitempty"`
		Title  *string `json:"title,omitempty"`
	} `json:"error,omitempty"`

	// An object pointing to fields that are incorrect in a submitted model
	Errors *map[string]interface{} `json:"errors,omitempty"`

	// This is the HTTP status code that is also sent with the request
	Meta *Meta `json:"meta,omitempty"`
}

// FundraisingEvents defines model for FundraisingEvents.
type FundraisingEvents []struct {
	AmountRaised *float32 `json:"amountRaised,omitempty"`
	Avatar       *Image   `json:"avatar,omitempty"`
	Banner       *Image   `json:"banner,omitempty"`
	BannerIntro  *string  `json:"bannerIntro,omitempty"`
	BannerTitle  *string  `json:"bannerTitle,omitempty"`
	CauseId      *int     `json:"causeId,omitempty"`
	Currency     *string  `json:"currency,omitempty"`
	Description  *string  `json:"description,omitempty"`
	EndsOn       *string  `json:"endsOn,omitempty"`
	Goal         *int     `json:"goal,omitempty"`
	Id           *int     `json:"id,omitempty"`
	Image        *Image   `json:"image,omitempty"`
	Logo         *Image   `json:"logo,omitempty"`
	Name         *string  `json:"name,omitempty"`
	Slug         *string  `json:"slug,omitempty"`
	StartsOn     *string  `json:"startsOn,omitempty"`
	Url          *string  `json:"url,omitempty"`
	Video        *Image   `json:"video,omitempty"`
}

// FundraisingEventsId defines model for FundraisingEventsId.
type FundraisingEventsId struct {
	AmountRaised *float32 `json:"amountRaised,omitempty"`
	Avatar       *Image   `json:"avatar,omitempty"`
	Banner       *Image   `json:"banner,omitempty"`
	BannerIntro  *string  `json:"bannerIntro,omitempty"`
	BannerTitle  *string  `json:"bannerTitle,omitempty"`
	CauseId      *int     `json:"causeId,omitempty"`
	Currency     *string  `json:"currency,omitempty"`
	Description  *string  `json:"description,omitempty"`
	EndsOn       *string  `json:"endsOn,omitempty"`
	Goal         *int     `json:"goal,omitempty"`
	Id           *int     `json:"id,omitempty"`
	Image        *Image   `json:"image,omitempty"`
	Logo         *Image   `json:"logo,omitempty"`
	Name         *string  `json:"name,omitempty"`
	Slug         *string  `json:"slug,omitempty"`
	StartsOn     *string  `json:"startsOn,omitempty"`
	Url          *string  `json:"url,omitempty"`
	Video        *Image   `json:"video,omitempty"`
}

// FundraisingEventsIdCampaigns defines model for FundraisingEventsIdCampaigns.
type FundraisingEventsIdCampaigns []struct {
	AmountRaised       *float32                `json:"amountRaised,omitempty"`
	CauseId            *int                    `json:"causeId,omitempty"`
	Currency           *string                 `json:"currency,omitempty"`
	Description        *string                 `json:"description,omitempty"`
	EndsOn             *string                 `json:"endsOn,omitempty"`
	FundraisingEventId *int                    `json:"fundraisingEventId,omitempty"`
	Goal               *int                    `json:"goal,omitempty"`
	Name               *string                 `json:"name,omitempty"`
	OriginalGoal       *int                    `json:"originalGoal,omitempty"`
	Slug               *string                 `json:"slug,omitempty"`
	StartsOn           *string                 `json:"startsOn,omitempty"`
	TeamId             *map[string]interface{} `json:"teamId,omitempty"`
	Thumbnail          *Image                  `json:"thumbnail,omitempty"`
	TotalAmountRaised  *float32                `json:"totalAmountRaised,omitempty"`
	Url                *string                 `json:"url,omitempty"`
	UserId             *int                    `json:"userId,omitempty"`
}

// FundraisingEventsIdIncentives defines model for FundraisingEventsIdIncentives.
type FundraisingEventsIdIncentives []struct {
	CreatedAt   *int    `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Image       *Image  `json:"image,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// FundraisingEventsIdLeaderboards defines model for FundraisingEventsIdLeaderboards.
type FundraisingEventsIdLeaderboards struct {
	Individual *[]struct {
		AmountRaised *float32 `json:"amount_raised,omitempty"`
		Name         *string  `json:"name,omitempty"`
		Url          *string  `json:"url,omitempty"`
		UserId       *int     `json:"userId,omitempty"`
	} `json:"individual,omitempty"`
	Team *[]struct {
		AmountRaised *float32 `json:"amount_raised,omitempty"`
		Name         *string  `json:"name,omitempty"`
		TeamId       *int     `json:"teamId,omitempty"`
		Url          *string  `json:"url,omitempty"`
	} `json:"team,omitempty"`
}

// FundraisingEventsIdRegistrationFields defines model for FundraisingEventsIdRegistrationFields.
type FundraisingEventsIdRegistrationFields struct {
	Address *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"address,omitempty"`
	ServiceHours *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"service_hours,omitempty"`
	ShirtSize *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"shirt_size,omitempty"`
}

// FundraisingEventsIdRegistrations defines model for FundraisingEventsIdRegistrations.
type FundraisingEventsIdRegistrations []struct {
	Address *struct {
		AddressLine1 *string `json:"addressLine1,omitempty"`
		AddressLine2 *string `json:"addressLine2,omitempty"`
		City         *string `json:"city,omitempty"`
		PostalCode   *string `json:"postalCode,omitempty"`
		State        *string `json:"state,omitempty"`
	} `json:"address,omitempty"`
	Email        *string `json:"email,omitempty"`
	Id           *int    `json:"id,omitempty"`
	RegisteredAt *string `json:"registeredAt,omitempty"`
	ServiceHours *bool   `json:"serviceHours,omitempty"`
	ShirtSize    *string `json:"shirtSize,omitempty"`
	Subscribed   *bool   `json:"subscribed,omitempty"`
	UserId       *int    `json:"userId,omitempty"`
}

// FundraisingEventsIdSchedule defines model for FundraisingEventsIdSchedule.
type FundraisingEventsIdSchedule []struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	StartsAt    *int    `json:"startsAt,omitempty"`
}

// FundraisingEventsIdVisibilityOptions defines model for FundraisingEventsIdVisibilityOptions.
type FundraisingEventsIdVisibilityOptions struct {
	Donate *struct {
		Visible *bool `json:"visible,omitempty"`
	} `json:"donate,omitempty"`
	DonorLeaderboard *struct {
		Type    *string `json:"type,omitempty"`
		Visible *bool   `json:"visible,omitempty"`
	} `json:"donorLeaderboard,omitempty"`
	EndsAt *struct {
		Visible *bool `json:"visible,omitempty"`
	} `json:"endsAt,omitempty"`
	FundraiserGoalAmount *struct {
		Type    *string `json:"type,omitempty"`
		Visible *bool   `json:"visible,omitempty"`
	} `json:"fundraiserGoalAmount,omitempty"`
	IndividualLeaderboard *struct {
		Visible *bool `json:"visible,omitempty"`
	} `json:"individualLeaderboard,omitempty"`
	PreventDonationsBeforeStart *struct {
		Visible *bool `json:"visible,omitempty"`
	} `json:"preventDonationsBeforeStart,omitempty"`
	Registration *struct {
		Visible *bool `json:"visible,omitempty"`
	} `json:"registration,omitempty"`
	StartsAt *struct {
		Visible *bool `json:"visible,omitempty"`
	} `json:"startsAt,omitempty"`
	TeamLeaderboard *struct {
		Type    *string `json:"type,omitempty"`
		Visible *bool   `json:"visible,omitempty"`
	} `json:"teamLeaderboard,omitempty"`
}

// Image defines model for Image.
type Image struct {
	Alt    *string `json:"alt,omitempty"`
	Height *int    `json:"height,omitempty"`
	Src    *string `json:"src,omitempty"`
	Width  *int    `json:"width,omitempty"`
}

// Livestream defines model for Livestream.
type Livestream struct {
	Channel *string `json:"channel,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// This is the HTTP status code that is also sent with the request
type Meta struct {
	Status *int `json:"status,omitempty"`
}

// We use cursor based pagination for our donations and this information is embeded in the response under the links key. You will find a prev and next link that point to the next pages of the paginated response. You may submit an optional count field of up to 100.
type Pagination struct {
	First *string `json:"first,omitempty"`
	Last  *string `json:"last,omitempty"`
	Next  string  `json:"next"`
	Prev  string  `json:"prev"`
	Self  string  `json:"self"`
}

// Social defines model for Social.
type Social struct {
	Discord   *string `json:"discord,omitempty"`
	Facebook  *string `json:"facebook,omitempty"`
	Instagram *string `json:"instagram,omitempty"`
	Mixer     *string `json:"mixer,omitempty"`
	Twitch    *string `json:"twitch,omitempty"`
	Twitter   *string `json:"twitter,omitempty"`
	Website   *string `json:"website,omitempty"`
	Youtube   *string `json:"youtube,omitempty"`
}

// Teams defines model for Teams.
type Teams []struct {
	Avatar     *Image  `json:"avatar,omitempty"`
	Bio        *string `json:"bio,omitempty"`
	Disbanded  *bool   `json:"disbanded,omitempty"`
	Id         *int    `json:"id,omitempty"`
	InviteOnly *bool   `json:"inviteOnly,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	Social     *Social `json:"social,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// TeamsId defines model for TeamsId.
type TeamsId struct {
	Avatar     *Image  `json:"avatar,omitempty"`
	Bio        *string `json:"bio,omitempty"`
	Disbanded  *bool   `json:"disbanded,omitempty"`
	Id         *int    `json:"id,omitempty"`
	InviteOnly *bool   `json:"inviteOnly,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	Social     *Social `json:"social,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// TeamsIdCampaigns defines model for TeamsIdCampaigns.
type TeamsIdCampaigns []struct {
	AmountRaised       *float32 `json:"amountRaised,omitempty"`
	CauseId            *int     `json:"causeId,omitempty"`
	Currency           *string  `json:"currency,omitempty"`
	Description        *string  `json:"description,omitempty"`
	EndsOn             *string  `json:"endsOn,omitempty"`
	FundraisingEventId *int     `json:"fundraisingEventId,omitempty"`
	Goal               *int     `json:"goal,omitempty"`
	Name               *string  `json:"name,omitempty"`
	OriginalGoal       *int     `json:"originalGoal,omitempty"`
	Slug               *string  `json:"slug,omitempty"`
	StartsOn           *string  `json:"startsOn,omitempty"`
	TeamId             *int     `json:"teamId,omitempty"`
	Thumbnail          *Image   `json:"thumbnail,omitempty"`
	TotalAmountRaised  *float32 `json:"totalAmountRaised,omitempty"`
	Url                *string  `json:"url,omitempty"`
	UserId             *int     `json:"userId,omitempty"`
}

// TeamsIdCampaignsId defines model for TeamsIdCampaignsId.
type TeamsIdCampaignsId struct {
	AmountRaised           *float32    `json:"amountRaised,omitempty"`
	Avatar                 *Image      `json:"avatar,omitempty"`
	CauseId                *int        `json:"causeId,omitempty"`
	Description            *string     `json:"description,omitempty"`
	EndsAt                 *int        `json:"endsAt,omitempty"`
	FundraiserGoalAmount   *float32    `json:"fundraiserGoalAmount,omitempty"`
	FundraisingEventId     *int        `json:"fundraisingEventId,omitempty"`
	Id                     *int        `json:"id,omitempty"`
	Livestream             *Livestream `json:"livestream,omitempty"`
	Name                   *string     `json:"name,omitempty"`
	OriginalGoalAmount     *float32    `json:"originalGoalAmount,omitempty"`
	Slug                   *string     `json:"slug,omitempty"`
	StartsAt               *int        `json:"startsAt,omitempty"`
	Status                 *string     `json:"status,omitempty"`
	Supportable            *bool       `json:"supportable,omitempty"`
	SupportingAmountRaised *float32    `json:"supportingAmountRaised,omitempty"`
	Team                   *struct {
		Avatar   *Image  `json:"avatar,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Slug     *string `json:"slug,omitempty"`
		Url      *string `json:"url,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"team,omitempty"`
	TotalAmountRaised *float32 `json:"totalAmountRaised,omitempty"`
	Url               *string  `json:"url,omitempty"`
	User              *struct {
		Avatar   *Image  `json:"avatar,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Slug     *string `json:"slug,omitempty"`
		Url      *string `json:"url,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"user,omitempty"`
}

// User defines model for User.
type User struct {
	About      *string                 `json:"about,omitempty"`
	Avatar     *Image                  `json:"avatar,omitempty"`
	Confirmed  *bool                   `json:"confirmed,omitempty"`
	Email      *string                 `json:"email,omitempty"`
	FirstName  *string                 `json:"firstName,omitempty"`
	Id         *int                    `json:"id,omitempty"`
	LastName   *string                 `json:"lastName,omitempty"`
	Newsletter *map[string]interface{} `json:"newsletter,omitempty"`
	Slug       *string                 `json:"slug,omitempty"`
	Social     *Social                 `json:"social,omitempty"`
	Url        *string                 `json:"url,omitempty"`
	Username   *string                 `json:"username,omitempty"`
}

// UsersId defines model for UsersId.
type UsersId struct {
	About             *string  `json:"about,omitempty"`
	Avatar            *Image   `json:"avatar,omitempty"`
	Id                *int     `json:"id,omitempty"`
	Slug              *string  `json:"slug,omitempty"`
	Social            *Social  `json:"social,omitempty"`
	TotalAmountRaised *float32 `json:"totalAmountRaised,omitempty"`
	Url               *string  `json:"url,omitempty"`
	Username          *string  `json:"username,omitempty"`
}

// UsersIdCampaigns defines model for UsersIdCampaigns.
type UsersIdCampaigns struct {
	AmountRaised           *float32                `json:"amountRaised,omitempty"`
	Avatar                 *Image                  `json:"avatar,omitempty"`
	CauseCurrency          *string                 `json:"causeCurrency,omitempty"`
	CauseId                *int                    `json:"causeId,omitempty"`
	Description            *string                 `json:"description,omitempty"`
	EndsAt                 *int                    `json:"endsAt,omitempty"`
	FundraiserGoalAmount   *float32                `json:"fundraiserGoalAmount,omitempty"`
	Id                     *int                    `json:"id,omitempty"`
	Livestream             *Livestream             `json:"livestream,omitempty"`
	Metadata               *map[string]interface{} `json:"metadata,omitempty"`
	Name                   *string                 `json:"name,omitempty"`
	OriginalFundraiserGoal *float32                `json:"originalFundraiserGoal,omitempty"`
	RegionId               *map[string]interface{} `json:"regionId,omitempty"`
	Slug                   *string                 `json:"slug,omitempty"`
	StartsAt               *int                    `json:"startsAt,omitempty"`
	Status                 *string                 `json:"status,omitempty"`
	Supportable            *bool                   `json:"supportable,omitempty"`
	SupportingAmountRaised *float32                `json:"supportingAmountRaised,omitempty"`
	TotalAmountRaised      *float32                `json:"totalAmountRaised,omitempty"`
	Type                   *string                 `json:"type,omitempty"`
	User                   *struct {
		Avatar   *Image  `json:"avatar,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Slug     *string `json:"slug,omitempty"`
		Url      *string `json:"url,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"user,omitempty"`
}

// UsersIdCampaignsId defines model for UsersIdCampaignsId.
type UsersIdCampaignsId struct {
	AmountRaised           *float32    `json:"amountRaised,omitempty"`
	Avatar                 *Image      `json:"avatar,omitempty"`
	CauseId                *int        `json:"causeId,omitempty"`
	Description            *string     `json:"description,omitempty"`
	EndsAt                 *int        `json:"endsAt,omitempty"`
	FundraiserGoalAmount   *float32    `json:"fundraiserGoalAmount,omitempty"`
	FundraisingEventId     *int        `json:"fundraisingEventId,omitempty"`
	Id                     *int        `json:"id,omitempty"`
	Livestream             *Livestream `json:"livestream,omitempty"`
	Name                   *string     `json:"name,omitempty"`
	OriginalGoalAmount     *float32    `json:"originalGoalAmount,omitempty"`
	Slug                   *string     `json:"slug,omitempty"`
	StartsAt               *int        `json:"startsAt,omitempty"`
	Status                 *string     `json:"status,omitempty"`
	Supportable            *bool       `json:"supportable,omitempty"`
	SupportingAmountRaised *float32    `json:"supportingAmountRaised,omitempty"`
	Team                   *struct {
		Avatar   *Image  `json:"avatar,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Slug     *string `json:"slug,omitempty"`
		Url      *string `json:"url,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"team,omitempty"`
	TotalAmountRaised *float32 `json:"totalAmountRaised,omitempty"`
	Url               *string  `json:"url,omitempty"`
	User              *struct {
		Avatar   *Image  `json:"avatar,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Slug     *string `json:"slug,omitempty"`
		Url      *string `json:"url,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"user,omitempty"`
}

// UsersIdOwnedTeams defines model for UsersIdOwnedTeams.
type UsersIdOwnedTeams []struct {
	Avatar     *Image  `json:"avatar,omitempty"`
	Bio        *string `json:"bio,omitempty"`
	Disbanded  *bool   `json:"disbanded,omitempty"`
	Id         *int    `json:"id,omitempty"`
	InviteOnly *bool   `json:"inviteOnly,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	Social     *Social `json:"social,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// UsersIdTeams defines model for UsersIdTeams.
type UsersIdTeams []struct {
	Avatar *Image  `json:"avatar,omitempty"`
	Id     *int    `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	Slug   *string `json:"slug,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// error response body. Only included in Post and Patch requests.
type BadRequest Error

// error response body. Only included in Post and Patch requests.
type Forbidden Error

// error response body. Only included in Post and Patch requests.
type NotAuthorized Error

// error response body. Only included in Post and Patch requests.
type NotFound Error

// error response body. Only included in Post and Patch requests.
type ServerError Error

// error response body. Only included in Post and Patch requests.
type Unprocessable Error

// GetCampaignsIdChallengesParams defines parameters for GetCampaignsIdChallenges.
type GetCampaignsIdChallengesParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetCampaignsIdDonationsParams defines parameters for GetCampaignsIdDonations.
type GetCampaignsIdDonationsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetCampaignsIdPollsParams defines parameters for GetCampaignsIdPolls.
type GetCampaignsIdPollsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetCampaignsIdRewardsParams defines parameters for GetCampaignsIdRewards.
type GetCampaignsIdRewardsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetCampaignsIdScheduleParams defines parameters for GetCampaignsIdSchedule.
type GetCampaignsIdScheduleParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetCampaignsIdSupportingCampaignsParams defines parameters for GetCampaignsIdSupportingCampaigns.
type GetCampaignsIdSupportingCampaignsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetCausesIdCampaignsParams defines parameters for GetCausesIdCampaigns.
type GetCausesIdCampaignsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetCausesIdFundraisingEventsParams defines parameters for GetCausesIdFundraisingEvents.
type GetCausesIdFundraisingEventsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetCausesIdVisibilityOptionsParams defines parameters for GetCausesIdVisibilityOptions.
type GetCausesIdVisibilityOptionsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetFundraisingEventsParams defines parameters for GetFundraisingEvents.
type GetFundraisingEventsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetFundraisingEventsIdCampaignsParams defines parameters for GetFundraisingEventsIdCampaigns.
type GetFundraisingEventsIdCampaignsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetFundraisingEventsIdIncentivesParams defines parameters for GetFundraisingEventsIdIncentives.
type GetFundraisingEventsIdIncentivesParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetFundraisingEventsIdLeaderboardsParams defines parameters for GetFundraisingEventsIdLeaderboards.
type GetFundraisingEventsIdLeaderboardsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetFundraisingEventsIdRegistrationFieldsParams defines parameters for GetFundraisingEventsIdRegistrationFields.
type GetFundraisingEventsIdRegistrationFieldsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetFundraisingEventsIdRegistrationsParams defines parameters for GetFundraisingEventsIdRegistrations.
type GetFundraisingEventsIdRegistrationsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetFundraisingEventsIdScheduleParams defines parameters for GetFundraisingEventsIdSchedule.
type GetFundraisingEventsIdScheduleParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetFundraisingEventsIdVisibilityOptionsParams defines parameters for GetFundraisingEventsIdVisibilityOptions.
type GetFundraisingEventsIdVisibilityOptionsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetTeamsParams defines parameters for GetTeams.
type GetTeamsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetTeamsIdCampaignsParams defines parameters for GetTeamsIdCampaigns.
type GetTeamsIdCampaignsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetUsersIdCampaignsParams defines parameters for GetUsersIdCampaigns.
type GetUsersIdCampaignsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetUsersIdOwnedTeamsParams defines parameters for GetUsersIdOwnedTeams.
type GetUsersIdOwnedTeamsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}

// GetUsersIdTeamsParams defines parameters for GetUsersIdTeams.
type GetUsersIdTeamsParams struct {
	// This is the amount of results to return for the page. This number must be between 1 and 100. Used in Pagination.
	Count *int `json:"count,omitempty"`

	// Used in Pagination.
	Before *int `json:"before,omitempty"`

	// Used in Pagination.
	After *int `json:"after,omitempty"`
}
